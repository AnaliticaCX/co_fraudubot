#!/usr/bin/env python3
"""
Ejemplo de uso del sistema de logging de Gemini LLM.

Este script demuestra c√≥mo usar el sistema de logging para rastrear
las interacciones con Gemini y analizar el rendimiento.
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from libreria.gemini_logger import gemini_logger
from libreria.gemini_log_utils import (
    get_recent_logs, 
    get_performance_summary, 
    get_error_analysis,
    export_logs_analysis,
    get_usage_trends
)
from libreria.germini_service import GeminiService

def example_basic_logging():
    """Ejemplo b√°sico de logging manual"""
    print("=== Ejemplo de Logging B√°sico ===")
    
    # Log manual de una operaci√≥n
    log_id = gemini_logger.log_request(
        operation="ejemplo_manual",
        prompt="Este es un prompt de ejemplo",
        response="Esta es una respuesta de ejemplo",
        execution_time=1.5,
        metadata={"ejemplo": True, "usuario": "demo"}
    )
    
    print(f"Log creado con ID: {log_id}")
    print()

def example_service_integration():
    """Ejemplo de integraci√≥n con GeminiService"""
    print("=== Ejemplo de Integraci√≥n con GeminiService ===")
    
    # Nota: Necesitas una API key v√°lida para esto
    try:
        # Inicializar servicio (reemplaza con tu API key)
        api_key = "TU_API_KEY_AQUI"  # Reemplaza con tu API key real
        gemini_service = GeminiService(api_key)
        
        # Ejemplo de clasificaci√≥n de documento
        texto_ejemplo = """
        CERTIFICADO LABORAL
        
        Por medio del presente se certifica que el se√±or Juan P√©rez
        identificado con c√©dula de ciudadan√≠a No. 12345678, labora en
        nuestra empresa desde el 15 de enero de 2020 en el cargo de
        Ingeniero de Sistemas con un salario mensual de $3,500,000.
        
        Esta certificaci√≥n se expide a solicitud del interesado.
        """
        
        print("Clasificando documento...")
        tipo_documento = gemini_service.clasificar_documento(texto_ejemplo)
        print(f"Tipo de documento detectado: {tipo_documento}")
        
    except Exception as e:
        print(f"Error al usar GeminiService: {e}")
        print("(Esto es normal si no tienes una API key configurada)")
    
    print()

def example_log_analysis():
    """Ejemplo de an√°lisis de logs"""
    print("=== Ejemplo de An√°lisis de Logs ===")
    
    # Obtener logs recientes
    recent_logs = get_recent_logs(hours=24)
    print(f"Logs en las √∫ltimas 24 horas: {len(recent_logs)}")
    
    # Obtener resumen de rendimiento
    performance = get_performance_summary(days=7)
    print(f"Resumen de rendimiento (7 d√≠as):")
    print(f"  - Total de requests: {performance['total_requests']}")
    print(f"  - Tasa de √©xito: {performance['success_rate']:.1f}%")
    print(f"  - Tiempo promedio de respuesta: {performance['average_response_time']:.2f}s")
    
    # An√°lisis de errores
    error_analysis = get_error_analysis(limit=10)
    print(f"An√°lisis de errores:")
    print(f"  - Total de errores: {error_analysis['total_errors']}")
    
    if error_analysis['most_common_errors']:
        print("  - Errores m√°s comunes:")
        for error, count in error_analysis['most_common_errors'][:3]:
            print(f"    * {error}: {count} veces")
    
    print()

def example_export_logs():
    """Ejemplo de exportaci√≥n de logs"""
    print("=== Ejemplo de Exportaci√≥n de Logs ===")
    
    # Exportar an√°lisis a Excel
    output_file = "gemini_logs_analysis.xlsx"
    success = export_logs_analysis(output_file, days=30)
    
    if success:
        print(f"An√°lisis exportado exitosamente a: {output_file}")
        print("El archivo contiene:")
        print("  - All_Logs: Todos los logs")
        print("  - Operation_Summary: Resumen por operaci√≥n")
        print("  - Errors: Logs con errores")
        print("  - Daily_Metrics: M√©tricas diarias")
    else:
        print("No se pudieron exportar los logs (posiblemente no hay datos)")
    
    print()

def example_usage_trends():
    """Ejemplo de an√°lisis de tendencias de uso"""
    print("=== Ejemplo de An√°lisis de Tendencias ===")
    
    trends = get_usage_trends(days=7)
    
    print("Tendencias de uso (7 d√≠as):")
    print(f"  - Uso diario: {len(trends['daily_usage'])} d√≠as con actividad")
    print(f"  - Patr√≥n horario: {len(trends['hourly_pattern'])} horas con actividad")
    
    if trends['daily_usage']:
        max_day = max(trends['daily_usage'].items(), key=lambda x: x[1])
        print(f"  - D√≠a m√°s activo: {max_day[0]} con {max_day[1]} requests")
    
    print()

def example_log_management():
    """Ejemplo de gesti√≥n de logs"""
    print("=== Ejemplo de Gesti√≥n de Logs ===")
    
    # Obtener estad√≠sticas generales
    stats = gemini_logger.get_statistics()
    print("Estad√≠sticas del sistema de logging:")
    print(f"  - Total de requests: {stats['total_requests']}")
    print(f"  - Requests exitosos: {stats['successful_requests']}")
    print(f"  - Requests fallidos: {stats['failed_requests']}")
    print(f"  - Tiempo promedio: {stats['average_execution_time']:.2f}s")
    
    # Limpiar logs antiguos (comentado para seguridad)
    # deleted_count = cleanup_old_logs(days=30)
    # print(f"Logs eliminados (m√°s de 30 d√≠as): {deleted_count}")
    
    print()

def main():
    """Funci√≥n principal que ejecuta todos los ejemplos"""
    print("üöÄ Sistema de Logging de Gemini LLM - Ejemplos de Uso")
    print("=" * 60)
    
    # Ejecutar ejemplos
    example_basic_logging()
    example_service_integration()
    example_log_analysis()
    example_export_logs()
    example_usage_trends()
    example_log_management()
    
    print("‚úÖ Todos los ejemplos completados.")
    print("\nüìÅ Los logs se guardan en: logs/gemini/")
    print("üìä Archivos generados:")
    print("  - gemini_operations.log: Logs b√°sicos")
    print("  - gemini_logs.json: Logs detallados en JSON")
    print("  - gemini_logs_analysis.xlsx: An√°lisis exportado")

if __name__ == "__main__":
    main() 